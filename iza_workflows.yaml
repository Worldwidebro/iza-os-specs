---
# IZA OS Warp Terminal Workflows
# Advanced terminal automation for the Intelligent Zero-Administration Operating System
# Version: 4.0 - Complete Integration

workflows:
  # Core System Management
  - name: "IZA OS Start"
    command: "cd ~/memU && ./iza start"
    tags: ["iza", "startup", "system"]
    description: "Start the complete IZA OS system"
    shortcut: "cmd+shift+i"
    arguments:
      - name: "mode"
        description: "Startup mode (production, development, maintenance)"
        default_value: "production"
  
  - name: "IZA OS Status"
    command: "cd ~/memU && ./iza status --detailed"
    tags: ["iza", "status", "monitoring"]
    description: "Get comprehensive system status"
    shortcut: "cmd+shift+s"
  
  - name: "IZA OS Brief"
    command: "cd ~/memU && ./iza brief"
    tags: ["iza", "daily", "briefing"]
    description: "Generate daily briefing with key metrics and opportunities"
    shortcut: "cmd+shift+b"

  # Repository & Sync Management
  - name: "Sync All Repositories"
    command: "cd ~/memU && ./sync_all.sh"
    tags: ["sync", "git", "repositories"]
    description: "Sync all 120+ repositories and integrations"
    shortcut: "cmd+shift+r"
  
  - name: "Quick Sync"
    command: "cd ~/memU && git add . && git commit -m \"Auto-sync $(date)\" && git push"
    tags: ["git", "quick", "sync"]
    description: "Quick commit and push current changes"

  # Problem Discovery & Venture Creation
  - name: "Scan Problems Global"
    command: "cd ~/memU && ./iza scan global"
    tags: ["iza", "problems", "discovery"]
    description: "Scan for global problems and opportunities"
    arguments:
      - name: "scope"
        description: "Scan scope (global, local, industry)"
        default_value: "global"
  
  - name: "Create SaaS Venture"
    command: "cd ~/memU && ./iza create venture \"${name}\" saas"
    tags: ["iza", "venture", "saas"]
    description: "Create a new SaaS venture"
    arguments:
      - name: "name"
        description: "Venture name"
        default_value: "AI Automation Platform"
  
  - name: "Create Marketplace Venture"
    command: "cd ~/memU && ./iza create venture \"${name}\" marketplace"
    tags: ["iza", "venture", "marketplace"]
    description: "Create a new marketplace venture"
    arguments:
      - name: "name"
        description: "Venture name"
        default_value: "AI Services Marketplace"

  # Learning & Development
  - name: "Start Learning Session"
    command: "cd ~/memU && ./iza teach"
    tags: ["iza", "learning", "education"]
    description: "Start personalized AI learning session"
    arguments:
      - name: "topic"
        description: "Learning topic"
        default_value: "advanced-ai"
  
  - name: "Generate Learning Manual"
    command: "cd ~/memU && python3 daily_manual_generator.py"
    tags: ["learning", "manual", "documentation"]
    description: "Generate daily learning manual"

  # Revenue & Analytics
  - name: "Revenue Report"
    command: "cd ~/memU && ./iza revenue --detailed"
    tags: ["iza", "revenue", "analytics"]
    description: "Generate detailed revenue report"
  
  - name: "Optimize Revenue"
    command: "cd ~/memU && ./iza optimize --focus=revenue"
    tags: ["iza", "optimization", "revenue"]
    description: "Run revenue optimization algorithms"

  # System Evolution & Optimization
  - name: "Evolve System"
    command: "cd ~/memU && ./iza evolve --force"
    tags: ["iza", "evolution", "improvement"]
    description: "Trigger recursive system evolution"
  
  - name: "Optimize Performance"
    command: "cd ~/memU && ./iza optimize --all"
    tags: ["iza", "optimization", "performance"]
    description: "Optimize entire system performance"

  # Memory & Knowledge Management
  - name: "Memory Consolidation"
    command: "cd ~/memU && python3 -c \"from IZA_OS.core.memory_orchestrator import MemoryOrchestrator; m = MemoryOrchestrator('IZA_OS/01_MEMORY_CORE'); print(m.consolidate_memories())\""
    tags: ["memory", "consolidation", "optimization"]
    description: "Consolidate and optimize memory systems"
  
  - name: "Sync Obsidian"
    command: "cd ~/memU && rsync -av Obsidian/ ~/Documents/Obsidian/IZA_OS/"
    tags: ["obsidian", "knowledge", "sync"]
    description: "Sync knowledge base to Obsidian vault"

  # Agent Management
  - name: "Agent Status"
    command: "cd ~/memU && python3 -c \"from IZA_OS.core.agent_coordinator import AgentCoordinator; ac = AgentCoordinator({'agents': {'max_concurrent': 10}}); import json; print(json.dumps(ac.get_agent_status(), indent=2))\""
    tags: ["agents", "status", "coordination"]
    description: "Check status of all AI agents"
  
  - name: "Scale Agents"
    command: "cd ~/memU && python3 -c \"from IZA_OS.core.agent_coordinator import AgentCoordinator; ac = AgentCoordinator({'agents': {'max_concurrent': 10}}); print(ac.scale_agents(${count}))\""
    tags: ["agents", "scaling", "management"]
    description: "Scale agent count up or down"
    arguments:
      - name: "count"
        description: "Target agent count"
        default_value: "8"

  # Development & Coding
  - name: "Generate API"
    command: "cd ~/memU && python3 code_generators/api_generator.py --name=${name} --type=${type}"
    tags: ["development", "api", "generation"]
    description: "Generate FastAPI application"
    arguments:
      - name: "name"
        description: "API name"
        default_value: "ai_service"
      - name: "type"
        description: "API type"
        default_value: "crud"
  
  - name: "Deploy to Production"
    command: "cd ~/memU && docker-compose -f docker-compose.prod.yml up -d"
    tags: ["deployment", "production", "docker"]
    description: "Deploy system to production"

  # Problem Solving & Research
  - name: "Research Assistant"
    command: "cd ~/memU && python3 research_assistant.py \"${query}\""
    tags: ["research", "assistant", "ai"]
    description: "AI-powered research assistant"
    arguments:
      - name: "query"
        description: "Research query"
        default_value: "latest AI trends"
  
  - name: "Solution Generator"
    command: "cd ~/memU && python3 solution_generator.py --problem=\"${problem}\""
    tags: ["solutions", "problems", "ai"]
    description: "Generate solutions for problems"
    arguments:
      - name: "problem"
        description: "Problem description"
        default_value: "scaling AI systems"

  # Financial Management
  - name: "Track Expenses"
    command: "cd ~/memU && python3 expense_tracker.py --amount=${amount} --category=${category}"
    tags: ["finance", "expenses", "tracking"]
    description: "Track business expenses"
    arguments:
      - name: "amount"
        description: "Expense amount"
        default_value: "100"
      - name: "category"
        description: "Expense category"
        default_value: "software"
  
  - name: "Generate Invoice"
    command: "cd ~/memU && python3 invoice_generator.py --client=\"${client}\" --amount=${amount}"
    tags: ["finance", "invoicing", "billing"]
    description: "Generate client invoice"
    arguments:
      - name: "client"
        description: "Client name"
        default_value: "AI Ventures Corp"
      - name: "amount"
        description: "Invoice amount"
        default_value: "5000"

  # Data Analysis & Visualization
  - name: "Generate Dashboard"
    command: "cd ~/memU && python3 dashboard_generator.py --type=${type}"
    tags: ["dashboard", "visualization", "analytics"]
    description: "Generate interactive dashboard"
    arguments:
      - name: "type"
        description: "Dashboard type"
        default_value: "revenue"
  
  - name: "Data Export"
    command: "cd ~/memU && python3 data_exporter.py --format=${format} --data=${data}"
    tags: ["data", "export", "analysis"]
    description: "Export system data"
    arguments:
      - name: "format"
        description: "Export format"
        default_value: "json"
      - name: "data"
        description: "Data type"
        default_value: "metrics"

  # Communication & Outreach
  - name: "Send Update"
    command: "cd ~/memU && python3 communication_manager.py --type=update --recipients=${recipients}"
    tags: ["communication", "updates", "outreach"]
    description: "Send system updates to stakeholders"
    arguments:
      - name: "recipients"
        description: "Recipient list"
        default_value: "team"
  
  - name: "Social Media Post"
    command: "cd ~/memU && python3 social_media_manager.py --platform=${platform} --content=\"${content}\""
    tags: ["social", "media", "marketing"]
    description: "Post to social media platforms"
    arguments:
      - name: "platform"
        description: "Social platform"
        default_value: "twitter"
      - name: "content"
        description: "Post content"
        default_value: "Latest AI breakthrough!"

  # System Maintenance
  - name: "Cleanup System"
    command: "cd ~/memU && python3 system_cleaner.py --deep"
    tags: ["maintenance", "cleanup", "system"]
    description: "Deep clean system files and cache"
  
  - name: "Backup System"
    command: "cd ~/memU && python3 backup_manager.py --type=full"
    tags: ["backup", "maintenance", "system"]
    description: "Create full system backup"
  
  - name: "Health Check"
    command: "cd ~/memU && python3 health_checker.py --comprehensive"
    tags: ["health", "monitoring", "system"]
    description: "Comprehensive system health check"

  # Quick Commands
  - name: "Quick Start Dev Environment"
    command: "cd ~/memU && docker-compose up -d && ./iza start"
    tags: ["development", "quick", "startup"]
    description: "Quick start development environment"
    shortcut: "cmd+shift+d"
  
  - name: "Emergency Stop"
    command: "cd ~/memU && pkill -f iza && docker-compose down"
    tags: ["emergency", "stop", "system"]
    description: "Emergency stop all IZA OS processes"
    shortcut: "cmd+shift+e"
  
  - name: "System Reset"
    command: "cd ~/memU && ./iza stop && sleep 5 && ./iza start --reset"
    tags: ["reset", "restart", "system"]
    description: "Complete system reset and restart"

  # Advanced Operations
  - name: "Multi-Agent Task"
    command: "cd ~/memU && python3 -c \"from IZA_OS.core.agent_coordinator import AgentCoordinator; ac = AgentCoordinator({'agents': {'max_concurrent': 10}}); ac.assign_task('${task}', ['${capabilities}'])\""
    tags: ["agents", "tasks", "coordination"]
    description: "Assign task to multi-agent system"
    arguments:
      - name: "task"
        description: "Task description"
        default_value: "analyze market trends"
      - name: "capabilities"
        description: "Required capabilities"
        default_value: "research,analysis"

  # Integration Commands
  - name: "Update All Integrations"
    command: "cd ~/memU && python3 integration_updater.py --all"
    tags: ["integrations", "updates", "sync"]
    description: "Update all external integrations"
  
  - name: "Test Integrations"
    command: "cd ~/memU && python3 integration_tester.py --comprehensive"
    tags: ["integrations", "testing", "validation"]
    description: "Test all system integrations"

# Workflow groups for organized access
groups:
  - name: "System Control"
    workflows: ["IZA OS Start", "IZA OS Status", "IZA OS Brief", "Emergency Stop", "System Reset"]
  
  - name: "Development"
    workflows: ["Generate API", "Quick Start Dev Environment", "Deploy to Production"]
  
  - name: "Business Operations"
    workflows: ["Create SaaS Venture", "Create Marketplace Venture", "Revenue Report", "Generate Invoice"]
  
  - name: "AI & Learning"
    workflows: ["Start Learning Session", "Multi-Agent Task", "Agent Status", "Evolve System"]
  
  - name: "Data & Analytics"
    workflows: ["Generate Dashboard", "Data Export", "Scan Problems Global"]
  
  - name: "Maintenance"
    workflows: ["Sync All Repositories", "Cleanup System", "Backup System", "Health Check"]
