version: '3.8'

services:
  # PostgreSQL for core data (moved to 5433 to avoid conflict)
  postgres:
    image: postgres:15
    container_name: iza-os-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: civilization
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-civilization_dev_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d civilization"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: iza-os-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Neo4j for knowledge graph database
  neo4j:
    image: neo4j:5.15
    container_name: iza-os-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/civilization_2025
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped

  # ChromaDB for embeddings and vector search
  chromadb:
    image: chromadb/chroma:latest
    container_name: iza-chromadb
    ports:
      - "8000:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      ALLOW_RESET: "TRUE"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MinIO for object storage (moved to 9002 to avoid conflict)
  minio:
    image: minio/minio:latest
    container_name: iza-os-minio
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: iza-os-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana for dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: iza-os-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-civilization_2025}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ../grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # n8n for workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: iza-os-n8n
    ports:
      - "5678:5678"
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-civilization_2025}
      WEBHOOK_URL: http://localhost:5678/
      GENERIC_TIMEZONE: America/New_York
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-civilization_dev_2025}
      N8N_METRICS: "true"
    volumes:
      - n8n_data:/home/node/.n8n
      - ../n8n:/home/node/.n8n/custom
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: iza-os-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@iza-os.com
      PGADMIN_DEFAULT_PASSWORD: civilization_2025
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: iza-os-redis-commander
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped

  # Portainer for container management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: iza-os-portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped

  # Nginx for reverse proxy
  nginx:
    image: nginx:alpine
    container_name: iza-os-nginx
    ports:
      - "8080:80"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - grafana
      - n8n
      - chromadb
    restart: unless-stopped

  # Civilization API (FastAPI backend)
  civilization-api:
    build:
      context: ../../civilization-api
      dockerfile: Dockerfile
    container_name: iza-os-civilization-api
    ports:
      - "8088:8088"
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-civilization_dev_2025}@postgres:5432/civilization
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin123}
      CHROMADB_URL: http://chromadb:8000
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      ANYTHINGLLM_URL: ${ANYTHINGLLM_URL:-http://host.docker.internal:3001}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - api_logs:/app/logs
    depends_on:
      - postgres
      - minio
      - chromadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    # Allow access to host services (AnythingLLM on port 3001)
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  default:
    name: iza_os_network
    driver: bridge

volumes:
  postgres_data:
    name: iza_os_postgres_data
  redis_data:
    name: iza_os_redis_data
  neo4j_data:
    name: iza_os_neo4j_data
  neo4j_logs:
    name: iza_os_neo4j_logs
  neo4j_import:
    name: iza_os_neo4j_import
  neo4j_plugins:
    name: iza_os_neo4j_plugins
  minio_data:
    name: iza_os_minio_data
  chromadb_data:
    name: iza_os_chromadb_data
  prometheus_data:
    name: iza_os_prometheus_data
  grafana_data:
    name: iza_os_grafana_data
  n8n_data:
    name: iza_os_n8n_data
  pgadmin_data:
    name: iza_os_pgadmin_data
  portainer_data:
    name: iza_os_portainer_data
  api_logs:
    name: iza_os_api_logs

# Health check and management commands
# Usage:
# docker compose -f IZA_OS/infra/docker/docker-compose.yml up -d
# docker compose -f IZA_OS/infra/docker/docker-compose.yml ps
# docker compose -f IZA_OS/infra/docker/docker-compose.yml logs civilization-api
# docker compose -f IZA_OS/infra/docker/docker-compose.yml down
