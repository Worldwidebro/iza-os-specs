version: '3.8'

services:
  orchestrator:
    build:
      context: .
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    volumes:
      - ./src:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  activepieces:
    image: activepieces/activepieces:latest
    ports:
      - "8050:80"
    env_file:
      - ./.env
    volumes:
      - activepieces_data:/usr/src/app/packages/server/dist/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  filesync:
    build:
      context: ./filesync
    ports:
      - "8060:8000"
    restart: unless-stopped

  beheader:
    build:
      context: ./beheader
    ports:
      - "8070:8000"
    restart: unless-stopped

  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-activepieces}
      POSTGRES_USER: ${POSTGRES_USER:-activepieces}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-activepieces}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.37.1
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
    command: '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:8.5.2
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    volumes:
      - ./infra/grafana-data:/var/lib/grafana

  neo4j:
    image: neo4j:4.4
    ports:
      - "7474:7474"
      - "7687:7687"
    env_file:
      - ./.env
    volumes:
      - ./infra/neo4j-data:/data

volumes:
  activepieces_data:
  postgres_data:
  redis_data:
  grafana_data:
  neo4j_data:

networks:
  default:
    name: ai-orchestrator