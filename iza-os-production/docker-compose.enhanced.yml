version: '3.8'

networks:
  iza-os-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  ollama_data:
    driver: local
  n8n_data:
    driver: local
  dify_storage:
    driver: local
  open_webui_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  vault_data:
    driver: local

services:
  # Core Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: iza_postgres
    environment:
      POSTGRES_DB: izaos
      POSTGRES_USER: ${POSTGRES_USER:-izaos}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-izaos}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: iza_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI/ML Services
  ollama:
    image: ollama/ollama:latest
    container_name: iza_ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - iza-os-network
    restart: unless-stopped
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  chroma:
    image: chromadb/chroma:latest
    container_name: iza_chroma
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      - iza-os-network
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_AUTH_TOKEN:-secure_chroma_token}
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.token_authn.TokenAuthenticationServerProvider
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dify AI Platform
  dify_api:
    image: langgenius/dify-api:0.6.13
    container_name: iza_dify_api
    environment:
      - MODE=api
      - LOG_LEVEL=INFO
      - SECRET_KEY=${DIFY_SECRET_KEY:-secure_dify_secret}
      - DB_USERNAME=${POSTGRES_USER:-izaos}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=dify
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_redis_password}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/1
      - WEB_API_CORS_ALLOW_ORIGINS=*
    volumes:
      - dify_storage:/app/storage
    depends_on:
      - postgres
      - redis
    ports:
      - "5001:5001"
    networks:
      - iza-os-network
    restart: unless-stopped

  dify_worker:
    image: langgenius/dify-api:0.6.13
    container_name: iza_dify_worker
    environment:
      - MODE=worker
      - LOG_LEVEL=INFO
      - SECRET_KEY=${DIFY_SECRET_KEY:-secure_dify_secret}
      - DB_USERNAME=${POSTGRES_USER:-izaos}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=dify
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_redis_password}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/1
    volumes:
      - dify_storage:/app/storage
    depends_on:
      - postgres
      - redis
    networks:
      - iza-os-network
    restart: unless-stopped

  dify_web:
    image: langgenius/dify-web:0.6.13
    container_name: iza_dify_web
    environment:
      - EDITION=SELF_HOSTED
      - CONSOLE_API_URL=${CONSOLE_API_URL:-http://localhost:5001}
      - APP_API_URL=${APP_API_URL:-http://localhost:5001}
    ports:
      - "3000:3000"
    depends_on:
      - dify_api
    networks:
      - iza-os-network
    restart: unless-stopped

  # Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: iza_n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-izaos}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-secure_n8n_password}
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/.n8n/workflows
    ports:
      - "5678:5678"
    depends_on:
      - postgres
    networks:
      - iza-os-network
    restart: unless-stopped

  # Open WebUI for LLM Interface
  open_webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: iza_open_webui
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-secure_webui_secret}
    volumes:
      - open_webui_data:/app/backend/data
    ports:
      - "8080:8080"
    depends_on:
      - ollama
    networks:
      - iza-os-network
    restart: unless-stopped

  # Security & Secrets Management
  vault:
    image: vault:1.13
    container_name: iza_vault
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-myroot}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
    ports:
      - "8200:8200"
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: iza_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: iza_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-secure_grafana_password}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: iza_loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - iza-os-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: iza_promtail
    volumes:
      - /var/log:/var/log:ro
      - ./monitoring/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - iza-os-network
    restart: unless-stopped

  # API Gateway & Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: iza_traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    networks:
      - iza-os-network
    restart: unless-stopped

  # IZA OS Core Services
  iza_api_gateway:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: iza_api_gateway
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-izaos}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/izaos
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-secure_jwt_secret}
      - ENVIRONMENT=production
    volumes:
      - ./api:/app
      - ./logs/api:/app/logs
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
      - vault
    networks:
      - iza-os-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.localhost`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  iza_agent_orchestrator:
    build:
      context: ./agents
      dockerfile: Dockerfile.orchestrator
    container_name: iza_agent_orchestrator
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-izaos}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/izaos
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - OLLAMA_URL=http://ollama:11434
      - CHROMA_URL=http://chroma:8000
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/
    volumes:
      - ./agents:/app
      - ./logs/agents:/app/logs
    depends_on:
      - postgres
      - redis
      - ollama
      - chroma
      - n8n
    networks:
      - iza-os-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  iza_business_model_manager:
    build:
      context: ./business_models
      dockerfile: Dockerfile.manager
    container_name: iza_business_model_manager
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-izaos}:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/izaos
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=${VAULT_ROOT_TOKEN:-myroot}
    volumes:
      - ./business_models:/app
      - ./logs/business_models:/app/logs
    depends_on:
      - postgres
      - redis
      - vault
      - iza_api_gateway
    networks:
      - iza-os-network
    restart: unless-stopped

  # Message Queue for Agent Communication
  rabbitmq:
    image: rabbitmq:3-management
    container_name: iza_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-secure_rabbit_password}
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - iza-os-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for System Metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: iza_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - iza-os-network

  # cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: iza_cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8082:8080"
    networks:
      - iza-os-network
    restart: unless-stopped

  # Backup Service
  backup_service:
    image: postgres:15-alpine
    container_name: iza_backup_service
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=${POSTGRES_USER:-izaos}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
    command: |
      sh -c "
        apk add --no-cache dcron &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - iza-os-network
    restart: unless-stopped

  # Health Check Service
  health_checker:
    build:
      context: ./monitoring/health_checker
      dockerfile: Dockerfile
    container_name: iza_health_checker
    environment:
      - CHECK_INTERVAL=30
      - SERVICES_CONFIG=/config/services.json
    volumes:
      - ./monitoring/health_checker/config:/config
      - ./logs/health_checker:/app/logs
    networks:
      - iza-os-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - ollama
      - chroma
